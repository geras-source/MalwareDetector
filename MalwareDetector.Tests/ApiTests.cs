using MalwareDetector.Core.Domains.MalwaresRules;
using MalwareDetector.Core.Domains.MalwaresRules.Repositories;
using MalwareDetector.Core.Domains.ReportOfFiles.Repositories;
using MalwareDetector.Core.Domains.ReportOfScan.Repositories;
using MalwareDetector.Core.FileSavers;
using MalwareDetector.Core.Helpers;
using MalwareDetector.Core.Scanner;
using MalwareDetector.Server;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.TestHost;
using Moq;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using Xunit;

namespace MalwareDetector.Tests
{
    public class ApiTests
    {
        private readonly HttpClient _httpClient;
        public ApiTests()
        {
            var server = new TestServer(new WebHostBuilder()
                .UseEnvironment("Development")
                .UseStartup<Startup>());
            _httpClient = server.CreateClient();
        }
        [Theory]
        [InlineData("POST")]
        public async Task TestingThePostMethod(string method)
        {
            // Arrange
            var request = new HttpRequestMessage(new HttpMethod(method), $"/api/Scanner");

            // Act
            var response = await _httpClient.SendAsync(request);
            // Assert
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
        }

        [Fact]
        public void AtTheEntranceComesTrojanFile_AtTheOutputStringReportWithTrojan()
        {
            // Arrange
            var id = Guid.NewGuid();
            var time = DateTime.Now;
            var path = @"G:\tests";
            var malwareRep = RegistrationTheMockMalwareRuleRepository();
            var reportFileRep = RegistrationTheMockReportOfFileRepository(id);
            var reportScanRep = RegistrationTheMockReportOfScanRepository(id, path, time);

            var timeService = new Mock<ITime>();
            timeService.Setup(repo => repo.GetTime()).Returns(time);
           
            var scannerService = new ScannerServices(malwareRep.Object, reportFileRep.Object, reportScanRep.Object, timeService.Object);
            var files = new List<FilesTamplate>()
            {
                new FilesTamplate 
                {
                    Name = "Test", TextFromFile = @"rm -rf %userprofile%\Documents", IsRead = true
                }
            };
            // Act
            scannerService.StartScan(id.ToString(), path, files);
            var result = scannerService.GetReportScan(id.ToString());
            var model = $"====== Scan result ======\n\r\nDirectory: {path}\r\nProcessed files: 1\r\ntrojan detects: 1\r\nErrors: 0\r\nExection time: {time - time}\r\n=========================\r\n";

            // Assert
            Assert.Equal(result, model);
        }
        private Mock<IMalwareRuleRepository> RegistrationTheMockMalwareRuleRepository()
        {
            var malwareRep = new Mock<IMalwareRuleRepository>();

            malwareRep.Setup(repo => repo.GetMalwareRules()).Returns(new List<MalwaresTemplate>()
            {
                new MalwaresTemplate { Name = "trojan", Malware = @"rm -rf %userprofile%\Documents", Extension = "*" }
            });

            return malwareRep;
        }

        private Mock<IReportOfFilesRepository> RegistrationTheMockReportOfFileRepository(Guid id)
        {
            var reportFileRep = new Mock<IReportOfFilesRepository>();
            var reportOfFileTemplate = new Core.Domains.ReportOfFiles.ReportOfFilesTemplate()
            {
                Id = id,
                FileName = "Test",
                MalwareType = "trojan",
                ScanReportId = id
            };

            reportFileRep.Setup(repo => repo.CreateAReport(reportOfFileTemplate)).Returns(id);
            reportFileRep.Setup(repo => repo.GetAReportByScannerId(id)).Returns(new List<Core.Domains.ReportOfFiles.ReportOfFilesTemplate>() { reportOfFileTemplate });

            return reportFileRep;
        }

        private Mock<IReportOfScanRepository> RegistrationTheMockReportOfScanRepository(Guid id, string path, DateTime time)
        {
            var reportScanRep = new Mock<IReportOfScanRepository>();

            var reportOfScanTemplate = new Core.Domains.ReportOfScan.ReportOfScanTemplate()
            {
                Id = id,
                ProcessedFiles = 1,
                PathDirectoryScan = path,
                StartTime = time,
                MalwareRulesName = new List<string>() { "trojan" },
                FileReportsId = new ConcurrentBag<Guid>(),
                EndTime = time,
                IsComplete = true,
                Errors = 0
            };

            reportScanRep.Setup(repo => repo.Create(reportOfScanTemplate)).Returns(id);
            reportScanRep.Setup(repo => repo.Get(id)).Returns(reportOfScanTemplate);

            return reportScanRep;
        }
    }
}
