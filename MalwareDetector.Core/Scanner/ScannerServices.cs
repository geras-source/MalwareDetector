using MalwareDetector.Core.Domains.MalwaresRules.Repositories;
using MalwareDetector.Core.Domains.ReportOfFiles;
using MalwareDetector.Core.Domains.ReportOfFiles.Repositories;
using MalwareDetector.Core.Domains.ReportOfScan;
using MalwareDetector.Core.Domains.ReportOfScan.Repositories;
using MalwareDetector.Core.FileSavers;
using MalwareDetector.Core.Helpers;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MalwareDetector.Core.Scanner
{
    public class ScannerServices : IScannerServices
    {
        private readonly IMalwareRuleRepository _malwareRuleRepository;
        private readonly IReportOfFilesRepository _reportOfFilesRepository;
        private readonly IReportOfScanRepository _reportOfScanRepository;
        private readonly ITime _time;

        public ScannerServices(IMalwareRuleRepository malwareRuleRepository, IReportOfFilesRepository reportOfFilesRepository, IReportOfScanRepository reportOfScanRepository, ITime time)
        {
            _malwareRuleRepository = malwareRuleRepository;
            _reportOfFilesRepository = reportOfFilesRepository;
            _reportOfScanRepository = reportOfScanRepository;
            _time = time;
        }
        /// <summary>
        /// Реализация метода получения отчета сканирования
        /// </summary>
        /// <param name="id">Индетификатор сканирования</param>
        /// <returns>Строка в виде конструктированного текста</returns>
        public string GetReportScan(string id)
        {
            Guid guid;
            
            try
            {
                guid = Guid.Parse(id);
            }
            catch
            {
                return "Id does not match the Guid pattern";
            }

            var scanReport = _reportOfScanRepository.Get(guid);
            if (scanReport == null)
            {
                return "No scan with this Id was found";
            }

            if (scanReport.IsComplete)
            {
                var scanRuleList = _malwareRuleRepository.GetMalwareRules();
                var fileReportList = _reportOfFilesRepository.GetAReportByScannerId(scanReport.Id);
                var report = new StringBuilder();

                report.AppendLine("====== Scan result ======\n");
                report.AppendLine($"Directory: {scanReport.PathDirectoryScan}");
                report.AppendLine($"Processed files: {scanReport.ProcessedFiles}");

                foreach (var scanRule in scanRuleList)
                {
                    report.AppendLine($"{scanRule.Name} detects: {fileReportList.Count(x => x.MalwareType == scanRule.Name)}");
                }

                report.AppendLine($"Errors: {scanReport.Errors}");
                report.AppendLine($"Exection time: {scanReport.EndTime - scanReport.StartTime}");
                report.AppendLine("=========================");
                return report.ToString();
            }

            return "Scan task in progress, please wait";
        }
        /// <summary>
        /// Реализация метода сканирования
        /// </summary>
        /// <param name="id">Индетификатор сканирования</param>
        /// <param name="pathToDirectory">Путь директории в которой производится сканирование</param>
        /// <param name="listOfFiles">Коллекция сохраненных файлов</param>
        public void StartScan(string id, string pathToDirectory, List<FilesTamplate> listOfFiles)
        {
            var malwares = _malwareRuleRepository.GetMalwareRules();
            var errors = 0;
            var startScan = _time.GetTime();
            var scanReport = new ReportOfScanTemplate()
            {
                Id = Guid.Parse(id),
                ProcessedFiles = listOfFiles.Count,
                PathDirectoryScan = pathToDirectory,
                StartTime = startScan,
                MalwareRulesName = malwares.Select(x => x.Name).ToList(),
                FileReportsId = new ConcurrentBag<Guid>()
            };

            _reportOfScanRepository.Create(scanReport);

            Parallel.ForEach(listOfFiles, new ParallelOptions { MaxDegreeOfParallelism = Environment.ProcessorCount }, file =>
            {
                if (file.IsRead == true)
                {
                    foreach (var malware in malwares)
                    {
                        if (Path.GetExtension(file.Name) != malware.Extension && (malware.Extension != "*"))
                            continue;
                        if (file.TextFromFile.Contains(malware.Malware))
                        {
                            var fileReport = new ReportOfFilesTemplate()
                            {
                                Id = Guid.NewGuid(),
                                FileName = file.Name,
                                MalwareType = malware.Name,
                                ScanReportId = scanReport.Id
                            };
                            lock (scanReport)
                            {
                                var fileReportId = _reportOfFilesRepository.CreateAReport(fileReport);
                                scanReport.FileReportsId.Add(fileReportId);
                            }
                        }
                    }
                }
                else
                {
                    errors++;
                }
            });

            scanReport.Errors = errors;
            scanReport.EndTime = _time.GetTime();
            scanReport.IsComplete = true;
            _reportOfScanRepository.Update(scanReport);
        }
    }
}