using MalwareDetector.Core.Domains.ReportOfScan;
using MalwareDetector.Core.Domains.ReportOfScan.Repositories;
using System;
using System.Collections.Generic;
using System.Linq;

namespace MalwareDetector.Data.ReportOfScan
{
    public class ReportOfScanRepository : IReportOfScanRepository
    {
        private static List<ReportOfScanModel> _listReportOfScanModel = new List<ReportOfScanModel>();
        /// <summary>
        /// Создание нового отчета
        /// </summary>
        /// <param name="scanReport">Модель отчета бизнес логики</param>
        /// <returns>Идентификатор отчета</returns>
        public Guid Create(ReportOfScanTemplate scanReport)
        {
            var entity = new ReportOfScanModel()
            {
                Id = scanReport.Id,
                PathDirectoryScan = scanReport.PathDirectoryScan,
                ProcessedFiles = scanReport.ProcessedFiles,
                Errors = scanReport.Errors,
                StartTime = scanReport.StartTime,
                EndTime = scanReport.EndTime
            };

            _listReportOfScanModel.Add(entity);
            return entity.Id;
        }
        /// <summary>
        /// Получить отчет по идентификатору
        /// </summary>
        /// <param name="id">Идентификатор отчета</param>
        /// <returns>Модель отчета бизнес логики</returns>
        public ReportOfScanTemplate Get(Guid id)
        {
            var entity = _listReportOfScanModel.FirstOrDefault(x => x.Id == id);

            if (entity == null)
            {
                return null;
            }

            return new ReportOfScanTemplate()
            {
                Id = entity.Id,
                PathDirectoryScan = entity.PathDirectoryScan,
                ProcessedFiles = entity.ProcessedFiles,
                Errors = entity.Errors,
                StartTime = entity.StartTime,
                EndTime = entity.EndTime,
                IsComplete = entity.IsComplete
            };
        }
        /// <summary>
        /// Обновления отчета сканирования (в данном случае после завершения сканирования)
        /// </summary>
        /// <param name="scanReport">Модель отчета бизнес логики</param>
        public void Update(ReportOfScanTemplate scanReport)
        {
            var entity = _listReportOfScanModel.FirstOrDefault(x => x.Id == scanReport.Id);

            if (entity != null)
            {
                entity.Id = scanReport.Id;
                entity.PathDirectoryScan = scanReport.PathDirectoryScan;
                entity.ProcessedFiles = scanReport.ProcessedFiles;
                entity.Errors = scanReport.Errors;
                entity.StartTime = scanReport.StartTime;
                entity.EndTime = scanReport.EndTime;
                entity.IsComplete = scanReport.IsComplete;
            }
        }
    }
}